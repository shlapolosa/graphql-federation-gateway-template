name: GraphQL Gateway CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'microservices/graphql-gateway/**'
      - '.github/workflows/graphql-gateway-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'microservices/graphql-gateway/**'

env:
  REGISTRY: docker.io
  REGISTRY_USERNAME: {{ DOCKER_USERNAME }}
  GATEWAY_NAME: {{ GATEWAY_NAME }}
  GITOPS_REPO: {{ GITOPS_REPO }}
  GITOPS_BRANCH: main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: |
        cd microservices/${{ env.GATEWAY_NAME }}
        npm ci
        
    - name: Run linting
      run: |
        cd microservices/${{ env.GATEWAY_NAME }}
        npm run lint || echo "Linting not configured"
        
    - name: Run tests
      run: |
        cd microservices/${{ env.GATEWAY_NAME }}
        npm test || echo "Tests not configured"
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Generate semantic version
      id: version
      run: |
        BASE_VERSION=$(cat .version 2>/dev/null || echo "1.0")
        COMMIT_SHA=$(git rev-parse --short HEAD)
        VERSION="${BASE_VERSION}.${GITHUB_RUN_NUMBER}-${COMMIT_SHA}"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: microservices/${{ env.GATEWAY_NAME }}/Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.GATEWAY_NAME }}:${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.GATEWAY_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update GitOps repository
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Clone GitOps repo
        git clone https://github.com/${{ github.repository_owner }}/${{ env.GITOPS_REPO }}.git gitops
        cd gitops
        
        # Update OAM application manifest
        OAM_FILE="applications/oam/${{ env.GATEWAY_NAME }}-application.yaml"
        if [ -f "$OAM_FILE" ]; then
          yq eval ".spec.components[] |= (select(.name == \"${{ env.GATEWAY_NAME }}\").properties.gatewayImage = \"${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.GATEWAY_NAME }}:${{ steps.version.outputs.VERSION }}\")" -i "$OAM_FILE"
          
          # Commit and push
          git add "$OAM_FILE"
          git commit -m "chore: update ${{ env.GATEWAY_NAME }} to version ${{ steps.version.outputs.VERSION }}"
          git push origin ${{ env.GITOPS_BRANCH }}
        else
          echo "OAM file not found: $OAM_FILE"
        fi
        
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ env.GATEWAY_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'